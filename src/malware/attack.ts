import { NS } from "@ns";
import { NetworkServer, filterRootAccessServers } from "util/network";
import { log } from "util/log";

type script = {
    id: string;
    path: string;
    ram: number;
    targetProperty: string;
    threadProperty: string;
}

const scripts: script[] = [
    {
        id: "h",
        path: "malware/hack.js",
        ram: 1.70,
        targetProperty: "targetHackMoneyPerSecond",
        threadProperty: "hackThreads",
    },
    {
        id: "g",
        path: "malware/grow.js",
        ram: 1.80,
        targetProperty: "targetGrowthMoneyPerSecond",
        threadProperty: "growthThreads",
    },
    {
        id: "w",
        path: "malware/weaken.js",
        ram: 1.75,
        targetProperty: "targetWeakenMoneyPerSecond",
        threadProperty: "weakenThreads",
    },
];

/**
 * Executes a script against a target server using the specified Hacking Growth Workflow (HGW) action.
 * @param ns - The netscript interface to bitburner functions.
 * @throws An error if the target server or HGW action is not specified, or if the HGW action is not found.
 */
export async function main(ns: NS): Promise<void> {

    /*
     *  Select h/g/w action.
     */
    const hgw = ns.args[0] as string;
    if (undefined === hgw) throw new Error("hgw action not specified");
    const script = scripts.find((s) => s.id === hgw)
    if (script === undefined) throw new Error(`hgw action ${hgw} not found`);

    /*
     *  Select target server
     */
    const target = ns.args[1] as string;
    let targetServer = {} as NetworkServer;
    const rootAccessServers = filterRootAccessServers(ns).sort((a, b) => b.ramAvailable - a.ramAvailable);

    // if target not specified, select the server with target property
    if (undefined === target) {
        targetServer = rootAccessServers.find((server) => server[script.targetProperty] === true) as NetworkServer;
    } else {
        targetServer = rootAccessServers.find((server) => server.hostname === target) as NetworkServer;
    }

    // validate the specified target exists in the root access servers
    if (undefined === targetServer) {
        throw new Error(`failed to set target server ${target}`);
    }

    /*
     *  Calculate desired threads.
     */
    let remainingThreads = targetServer[script.threadProperty] ;
    
    /*
     *  Execute script threads on root access servers.
     */

    log.TRACE.print(ns, `remaining Threads ${remainingThreads}`);

    rootAccessServers.forEach((server) => {
        if (remainingThreads <= 0) return;
        const threads = Math.floor((server.maxRam - server.ramUsed) / script.ram);
        if (threads > 0) {
            log.TRACE.print(ns, `executing ${script} on ${server.maxRam}GB ${server.hostname} with ${threads} threads`);
            if (hgw === "h" && targetServer.hackChance < 80) { // single threads
                for (let i = 0; i < threads; i++) {
                    ns.exec(script.path, server.hostname, 1, targetServer.hostname);
                    remainingThreads--;
                }
            } else { // multithread
                ns.exec(script.path, server.hostname, threads, targetServer.hostname);
                remainingThreads -= threads;
            }
        }
    });
    log.TRACE.print(ns, `remaining Threads ${remainingThreads}`);

}    